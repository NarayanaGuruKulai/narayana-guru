// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    // refresh_token            String? @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role Role @default(user)
    accounts      Account[]
    sessions      Session[]
}

enum Role {
  admin
    user
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model memberships {
    id        Int      @id @default(autoincrement()) 
    name      String
    address   String?   // Allow null values
    date      String? // Allow null values
    type      MemType
    receiptno Int
    photo     String
}


enum MemType {
    ajeeva
    poshaka
    mrutha
}

model ledger {
    id   Int      @id @default(autoincrement()) 
    TransactionType TransactionType
    TransactionHeader String
    Amount  Int
    ReceiptNumber  Int 
    date String
}

enum TransactionType {
    incoming
    outgoing
}

model  bhajane {
    id   Int      @id @default(autoincrement()) 
    date String
    name String
}

model hallBooking {
    id   Int      @id @default(autoincrement()) 
    BookingDate String
    BookingType BookingTypes
    BookingNote String
    BookingTime  BookingTimes
}

enum BookingTimes {
    morning_to_evening
    evening_to_night
}

enum BookingTypes {
    marriagereceptionengagement
    lastrites
    other
}

model gallery {
    id   Int      @id @default(autoincrement()) 
    imagePath   String
    uploadDate  DateTime @default(now())
}

model committeeCore {
    id   Int      @id @default(autoincrement()) 
    Post    String
    Name    String
    photo     String
}

model committeeMembers {
    id   Int      @id @default(autoincrement()) 
    Name    String
    photo String
}